import cv2
import numpy as np

def nothing(x): 			            	  # Define nothing in trackbars
    pass
cap = cv2.VideoCapture(-1) 			     	  # Initalize video capture
cv2.namedWindow("Trackbars")                         	  # Create window for track bar so that identified shape can be changed
cv2.namedTrackbar("LH". "Trackbars", 0, 180, nothing) 	  # Lower hue
cv2.namedTrackbar("LS". "Trackbars", 108, 255, nothing)   # Lower saturation
cv2.namedTrackbar("LV". "Trackbars", 0, 255, nothing) 	  # Lower value
cv2.namedTrackbar("UH". "Trackbars", 180, 180, nothing)   # Upper hue
cv2.namedTrackbar("US". "Trackbars", 255, 255, nothing)   # Upper saturation
cv2.namedTrackbar("UV". "Trackbars", 255, 255, nothing)   # Upper value
font = cv2.FONT_HERSHEY_DUPLEX 				  # Identifies text font for square lablel

while True:
    _, frame = cap.read() 				  # Loads frame from camera	
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)          # Flag to convert BGR to HSV color
    lh = cv2.getTrackbarPos("LH", "Trackbars")            # Change mask values as adjusted by trackbar
    ls = cv2.getTrackbarPos("LS", "Trackbars") 
    lv = cv2.getTrackbarPos("LV", "Trackbars") 
    uh = cv2.getTrackbarPos("UH", "Trackbars") 
    us = cv2.getTrackbarPos("US", "Trackbars") 
    uv = cv2.getTrackbarPos("UV", "Trackbars") 
    lower_red = np.array([lh, ls, lv]) 			  # Defines lower ranges for array
    upper_red = np.array([uh, us, uv]) 			  # Defines upper ranges for array
    mask = cv2.inRange(hsv, lower_red, upper_red) 	  # Create mask
    kernel = np.ones((5,5), np.uint8) 			  # Creates array	
    mask = cv2.erode(mask, kernel)                        # Erodes so that only mask shows
    
    _, contours, _ = cv2.findCOntours(mask,cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)             # Detects contours
    for cnt in contours: 				                                       # Contour specifications
	      area = cv2.contourArea(cnt)
	      approx = cv2.approxPolyDP(cnt, 0.02*cv2.arcLength(cnt, True), True)        
	      x = approx.ravel()[0]
	      y = approx.ravel()[1]
	      if area >200:					                               # If area greater than 200 pixels
	          cv2.drawContours(frame, [approx], 0, (0, 0, 0), 5)                           # Draws line around objects
	          if len(approx) == 4: # If 4 sided contour is detected
		            cv2.putText(frame, "Square". (x, y), font, 1, (0, 255, 0))         # Labels square in green

    cv2.imshow("Frame", frame)                            # Show frame in window
    cv2.imshow("Mask", mask)                              # Show mask in window
    key = cv2.waitKey(1)
    if key == 27:
        break
cap.release()
cv2.destroyAllWindows()
