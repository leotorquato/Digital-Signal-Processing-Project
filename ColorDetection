import cv2
import numpy as np
from picamera.array import PiRGBArray
from picamera import PiCamera

def nothing(x):
    pass
cv2.namedWindow("Trackbars")                           # Create window for track bar so that identified color can be changed
cv2.namedTrackbar("B". "Trackbars", 131, 255, nothing) # Blue
cv2.namedTrackbar("G". "Trackbars", 0, 255, nothing)   # Green
cv2.namedTrackbar("R". "Trackbars", 0, 255, nothing)   # Red

camera = PiCamera()
camera.resolution = (640, 480)                       # Camera resoltuion
camera.framerate = 30                                # Camera framerate
rawCapture = PiRGBArray(camera, size = (640, 480))   # Camera capture

for frame in camera.capture_continuous(rawCapture, format = "bgr", use_video_port = True):
    image = frame.array
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)     # Flag to convert BGR to HSV color
    B = cv2.getTrackbarPos("B", "Trackbars")         # Change mask values as adjusted by trackbar
    G = cv2.getTrackbarPos("G", "Trackbars")
    R = cv2.getTrackbarPos("R", "Trackbars")
    blue = np.uint8([[[B, G, R]]])                          # Blue set as unsigned integer
    hsvBLue = cv2.cvtColor(blue, cv2.COLOR_BGR2HSV)
    lowerLimit = np.uint8([hsvBlue[0][0][0]-10, 100, 100])  # Lower limits of blue
    upperLimit = np.uint8([hsvBlue[0][0][0]+10, 255, 255])  # Upper limits of blue
    mask = cv2.inRange(hsv, lowerLimit, upperLimit)
    
    result = cv2.bitwise_and(image, image, mask = mask)     # Result is function of mask and color
    cv2.imshow("Frame", image)                              # Show frame in window
    cv2.imshow("Mask", mask)                                # Show mask in window
    cv2.imshow("Result", result)                            # Show result in window
    key = cv2.waitKey(1)
    rawCapture.truncate(0)
    if key == 27:
        break
cv2.destroyAllWindows()
